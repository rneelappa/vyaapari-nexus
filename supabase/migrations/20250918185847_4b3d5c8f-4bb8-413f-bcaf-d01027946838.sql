-- Enable schema and types
CREATE SCHEMA IF NOT EXISTS tally;

-- Enum for sync tracking
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'sync_status' AND typschema = 'tally') THEN
    CREATE TYPE tally.sync_status AS ENUM ('NewRecord','Synced','NewUpdate','Deleted');
  END IF;
END
$$ LANGUAGE plpgsql;

-- Timestamp helper to auto-update updated_at
CREATE OR REPLACE FUNCTION tally.update_timestamp() RETURNS trigger AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Master Tables

-- 1) mst_group
CREATE TABLE IF NOT EXISTS tally.mst_group (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  parent_id BIGINT REFERENCES tally.mst_group(id) ON DELETE SET NULL,
  description TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  sync_status tally.sync_status NOT NULL DEFAULT 'NewRecord'
);
CREATE TRIGGER trg_mst_group_update
BEFORE UPDATE ON tally.mst_group
FOR EACH ROW EXECUTE FUNCTION tally.update_timestamp();

-- 2) mst_ledger
CREATE TABLE IF NOT EXISTS tally.mst_ledger (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  group_id BIGINT REFERENCES tally.mst_group(id) ON DELETE SET NULL,
  parent_id BIGINT REFERENCES tally.mst_ledger(id) ON DELETE SET NULL,
  description TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  sync_status tally.sync_status NOT NULL DEFAULT 'NewRecord'
);
CREATE TRIGGER trg_mst_ledger_update
BEFORE UPDATE ON tally.mst_ledger
FOR EACH ROW EXECUTE FUNCTION tally.update_timestamp();

-- 3) mst_vouchertype
CREATE TABLE IF NOT EXISTS tally.mst_vouchertype (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  code TEXT,
  parent_id BIGINT REFERENCES tally.mst_vouchertype(id) ON DELETE SET NULL,
  description TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  sync_status tally.sync_status NOT NULL DEFAULT 'NewRecord'
);
CREATE TRIGGER trg_mst_vouchertype_update
BEFORE UPDATE ON tally.mst_vouchertype
FOR EACH ROW EXECUTE FUNCTION tally.update_timestamp();

-- 4) mst_uom
CREATE TABLE IF NOT EXISTS tally.mst_uom (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  description TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  sync_status tally.sync_status NOT NULL DEFAULT 'NewRecord'
);
CREATE TRIGGER trg_mst_uom_update
BEFORE UPDATE ON tally.mst_uom
FOR EACH ROW EXECUTE FUNCTION tally.update_timestamp();

-- 5) mst_godown
CREATE TABLE IF NOT EXISTS tally.mst_godown (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  location TEXT,
  parent_id BIGINT REFERENCES tally.mst_godown(id) ON DELETE SET NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  sync_status tally.sync_status NOT NULL DEFAULT 'NewRecord'
);
CREATE TRIGGER trg_mst_godown_update
BEFORE UPDATE ON tally.mst_godown
FOR EACH ROW EXECUTE FUNCTION tally.update_timestamp();

-- 6) mst_stock_group
CREATE TABLE IF NOT EXISTS tally.mst_stock_group (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  parent_id BIGINT REFERENCES tally.mst_stock_group(id) ON DELETE SET NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  sync_status tally.sync_status NOT NULL DEFAULT 'NewRecord'
);
CREATE TRIGGER trg_mst_stock_group_update
BEFORE UPDATE ON tally.mst_stock_group
FOR EACH ROW EXECUTE FUNCTION tally.update_timestamp();

-- 7) mst_stock_item
CREATE TABLE IF NOT EXISTS tally.mst_stock_item (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  stock_group_id BIGINT REFERENCES tally.mst_stock_group(id) ON DELETE SET NULL,
  uom_id BIGINT REFERENCES tally.mst_uom(id) ON DELETE SET NULL,
  description TEXT,
  opening_stock NUMERIC(18,6) DEFAULT 0,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  sync_status tally.sync_status NOT NULL DEFAULT 'NewRecord'
);
CREATE TRIGGER trg_mst_stock_item_update
BEFORE UPDATE ON tally.mst_stock_item
FOR EACH ROW EXECUTE FUNCTION tally.update_timestamp();

-- 8) mst_cost_category
CREATE TABLE IF NOT EXISTS tally.mst_cost_category (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  parent_id BIGINT REFERENCES tally.mst_cost_category(id) ON DELETE SET NULL,
  description TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  sync_status tally.sync_status NOT NULL DEFAULT 'NewRecord'
);
CREATE TRIGGER trg_mst_cost_category_update
BEFORE UPDATE ON tally.mst_cost_category
FOR EACH ROW EXECUTE FUNCTION tally.update_timestamp();

-- 9) mst_cost_centre
CREATE TABLE IF NOT EXISTS tally.mst_cost_centre (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  category_id BIGINT REFERENCES tally.mst_cost_category(id) ON DELETE SET NULL,
  description TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  sync_status tally.sync_status NOT NULL DEFAULT 'NewRecord'
);
CREATE TRIGGER trg_mst_cost_centre_update
BEFORE UPDATE ON tally.mst_cost_centre
FOR EACH ROW EXECUTE FUNCTION tally.update_timestamp();

-- 10) mst_attendance_type
CREATE TABLE IF NOT EXISTS tally.mst_attendance_type (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  description TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  sync_status tally.sync_status NOT NULL DEFAULT 'NewRecord'
);
CREATE TRIGGER trg_mst_attendance_type_update
BEFORE UPDATE ON tally.mst_attendance_type
FOR EACH ROW EXECUTE FUNCTION tally.update_timestamp();

-- 11) mst_employee
CREATE TABLE IF NOT EXISTS tally.mst_employee (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  code TEXT,
  department TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  sync_status tally.sync_status NOT NULL DEFAULT 'NewRecord'
);
CREATE TRIGGER trg_mst_employee_update
BEFORE UPDATE ON tally.mst_employee
FOR EACH ROW EXECUTE FUNCTION tally.update_timestamp();

-- 12) mst_payhead
CREATE TABLE IF NOT EXISTS tally.mst_payhead (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  type TEXT,
  amount NUMERIC(18,6),
  description TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  sync_status tally.sync_status NOT NULL DEFAULT 'NewRecord'
);
CREATE TRIGGER trg_mst_payhead_update
BEFORE UPDATE ON tally.mst_payhead
FOR EACH ROW EXECUTE FUNCTION tally.update_timestamp();

-- 13) mst_gst_effective_rate
CREATE TABLE IF NOT EXISTS tally.mst_gst_effective_rate (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  rate NUMERIC(8,4),
  effective_from DATE,
  effective_to DATE,
  description TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  sync_status tally.sync_status NOT NULL DEFAULT 'NewRecord'
);
CREATE TRIGGER trg_mst_gst_effective_rate_update
BEFORE UPDATE ON tally.mst_gst_effective_rate
FOR EACH ROW EXECUTE FUNCTION tally.update_timestamp();

-- 14) mst_opening_batch_allocation
CREATE TABLE IF NOT EXISTS tally.mst_opening_batch_allocation (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  batch_name TEXT,
  batch_date DATE,
  amount NUMERIC(18,6),
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  sync_status tally.sync_status NOT NULL DEFAULT 'NewRecord'
);
CREATE TRIGGER trg_mst_opening_batch_allocation_update
BEFORE UPDATE ON tally.mst_opening_batch_allocation
FOR EACH ROW EXECUTE FUNCTION tally.update_timestamp();

-- 15) mst_opening_bill_allocation
CREATE TABLE IF NOT EXISTS tally.mst_opening_bill_allocation (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  bill_no TEXT,
  bill_date DATE,
  amount NUMERIC(18,6),
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  sync_status tally.sync_status NOT NULL DEFAULT 'NewRecord'
);
CREATE TRIGGER trg_mst_opening_bill_allocation_update
BEFORE UPDATE ON tally.mst_opening_bill_allocation
FOR EACH ROW EXECUTE FUNCTION tally.update_timestamp();

-- 16) mst_stockitem_standard_cost
CREATE TABLE IF NOT EXISTS tally.mst_stockitem_standard_cost (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  stock_item_id BIGINT REFERENCES tally.mst_stock_item(id) ON DELETE SET NULL,
  standard_cost NUMERIC(18,6),
  effective_from DATE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  sync_status tally.sync_status NOT NULL DEFAULT 'NewRecord'
);
CREATE TRIGGER trg_mst_stockitem_standard_cost_update
BEFORE UPDATE ON tally.mst_stockitem_standard_cost
FOR EACH ROW EXECUTE FUNCTION tally.update_timestamp();

-- 17) mst_stockitem_standard_price
CREATE TABLE IF NOT EXISTS tally.mst_stockitem_standard_price (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  stock_item_id BIGINT REFERENCES tally.mst_stock_item(id) ON DELETE SET NULL,
  standard_price NUMERIC(18,6),
  effective_from DATE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  sync_status tally.sync_status NOT NULL DEFAULT 'NewRecord'
);
CREATE TRIGGER trg_mst_stockitem_standard_price_update
BEFORE UPDATE ON tally.mst_stockitem_standard_price
FOR EACH ROW EXECUTE FUNCTION tally.update_timestamp();

-- Transaction Tables

-- 18) trn_voucher
CREATE TABLE IF NOT EXISTS tally.trn_voucher (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  voucher_no TEXT,
  voucher_date DATE,
  voucher_type_id BIGINT REFERENCES tally.mst_vouchertype(id) ON DELETE SET NULL,
  party_id BIGINT REFERENCES tally.mst_ledger(id) ON DELETE SET NULL,
  description TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  sync_status tally.sync_status NOT NULL DEFAULT 'NewRecord'
);
CREATE TRIGGER trg_trn_voucher_update
BEFORE UPDATE ON tally.trn_voucher
FOR EACH ROW EXECUTE FUNCTION tally.update_timestamp();

-- 19) trn_accounting
CREATE TABLE IF NOT EXISTS tally.trn_accounting (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  voucher_id BIGINT REFERENCES tally.trn_voucher(id) ON DELETE SET NULL,
  ledger_id BIGINT REFERENCES tally.mst_ledger(id) ON DELETE SET NULL,
  debit NUMERIC(18,6),
  credit NUMERIC(18,6),
  description TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  sync_status tally.sync_status NOT NULL DEFAULT 'NewRecord'
);
CREATE TRIGGER trg_trn_accounting_update
BEFORE UPDATE ON tally.trn_accounting
FOR EACH ROW EXECUTE FUNCTION tally.update_timestamp();

-- 20) trn_inventory
CREATE TABLE IF NOT EXISTS tally.trn_inventory (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  voucher_id BIGINT REFERENCES tally.trn_voucher(id) ON DELETE SET NULL,
  item_id BIGINT REFERENCES tally.mst_stock_item(id) ON DELETE SET NULL,
  godown_id BIGINT REFERENCES tally.mst_godown(id) ON DELETE SET NULL,
  quantity NUMERIC(18,6),
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  sync_status tally.sync_status NOT NULL DEFAULT 'NewRecord'
);
CREATE TRIGGER trg_trn_inventory_update
BEFORE UPDATE ON tally.trn_inventory
FOR EACH ROW EXECUTE FUNCTION tally.update_timestamp();

-- 21) trn_employee
CREATE TABLE IF NOT EXISTS tally.trn_employee (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  employee_id BIGINT REFERENCES tally.mst_employee(id) ON DELETE SET NULL,
  date DATE,
  type TEXT,
  amount NUMERIC(18,6),
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  sync_status tally.sync_status NOT NULL DEFAULT 'NewRecord'
);
CREATE TRIGGER trg_trn_employee_update
BEFORE UPDATE ON tally.trn_employee
FOR EACH ROW EXECUTE FUNCTION tally.update_timestamp();

-- 22) trn_payhead
CREATE TABLE IF NOT EXISTS tally.trn_payhead (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  employee_id BIGINT REFERENCES tally.mst_employee(id) ON DELETE SET NULL,
  payhead_id BIGINT REFERENCES tally.mst_payhead(id) ON DELETE SET NULL,
  amount NUMERIC(18,6),
  date DATE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  sync_status tally.sync_status NOT NULL DEFAULT 'NewRecord'
);
CREATE TRIGGER trg_trn_payhead_update
BEFORE UPDATE ON tally.trn_payhead
FOR EACH ROW EXECUTE FUNCTION tally.update_timestamp();

-- 23) trn_attendance
CREATE TABLE IF NOT EXISTS tally.trn_attendance (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  employee_id BIGINT REFERENCES tally.mst_employee(id) ON DELETE SET NULL,
  attendance_type_id BIGINT REFERENCES tally.mst_attendance_type(id) ON DELETE SET NULL,
  date DATE,
  hours NUMERIC(18,6),
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  sync_status tally.sync_status NOT NULL DEFAULT 'NewRecord'
);
CREATE TRIGGER trg_trn_attendance_update
BEFORE UPDATE ON tally.trn_attendance
FOR EACH ROW EXECUTE FUNCTION tally.update_timestamp();

-- 24) trn_batch
CREATE TABLE IF NOT EXISTS tally.trn_batch (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  batch_no TEXT UNIQUE,
  date DATE,
  description TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  sync_status tally.sync_status NOT NULL DEFAULT 'NewRecord'
);
CREATE TRIGGER trg_trn_batch_update
BEFORE UPDATE ON tally.trn_batch
FOR EACH ROW EXECUTE FUNCTION tally.update_timestamp();

-- 25) trn_bill
CREATE TABLE IF NOT EXISTS tally.trn_bill (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  bill_no TEXT UNIQUE,
  date DATE,
  total NUMERIC(18,6),
  supplier_id BIGINT REFERENCES tally.mst_ledger(id) ON DELETE SET NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  sync_status tally.sync_status NOT NULL DEFAULT 'NewRecord'
);
CREATE TRIGGER trg_trn_bill_update
BEFORE UPDATE ON tally.trn_bill
FOR EACH ROW EXECUTE FUNCTION tally.update_timestamp();

-- 26) trn_bank
CREATE TABLE IF NOT EXISTS tally.trn_bank (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  bank_name TEXT,
  account_no TEXT,
  amount NUMERIC(18,6),
  date DATE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  sync_status tally.sync_status NOT NULL DEFAULT 'NewRecord'
);
CREATE TRIGGER trg_trn_bank_update
BEFORE UPDATE ON tally.trn_bank
FOR EACH ROW EXECUTE FUNCTION tally.update_timestamp();

-- 27) trn_closingstock_ledger
CREATE TABLE IF NOT EXISTS tally.trn_closingstock_ledger (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ledger_id BIGINT REFERENCES tally.mst_ledger(id) ON DELETE SET NULL,
  closing_value NUMERIC(18,6),
  date DATE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  sync_status tally.sync_status NOT NULL DEFAULT 'NewRecord'
);
CREATE TRIGGER trg_trn_closingstock_ledger_update
BEFORE UPDATE ON tally.trn_closingstock_ledger
FOR EACH ROW EXECUTE FUNCTION tally.update_timestamp();

-- 28) trn_cost_centre
CREATE TABLE IF NOT EXISTS tally.trn_cost_centre (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  cost_centre_id BIGINT REFERENCES tally.mst_cost_centre(id) ON DELETE SET NULL,
  voucher_id BIGINT REFERENCES tally.trn_voucher(id) ON DELETE SET NULL,
  amount NUMERIC(18,6),
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  sync_status tally.sync_status NOT NULL DEFAULT 'NewRecord'
);
CREATE TRIGGER trg_trn_cost_centre_update
BEFORE UPDATE ON tally.trn_cost_centre
FOR EACH ROW EXECUTE FUNCTION tally.update_timestamp();

-- 29) trn_cost_category_centre
CREATE TABLE IF NOT EXISTS tally.trn_cost_category_centre (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  cost_centre_id BIGINT REFERENCES tally.trn_cost_centre(id) ON DELETE SET NULL,
  cost_category_id BIGINT REFERENCES tally.mst_cost_category(id) ON DELETE SET NULL,
  amount NUMERIC(18,6),
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  sync_status tally.sync_status NOT NULL DEFAULT 'NewRecord'
);
CREATE TRIGGER trg_trn_cost_category_centre_update
BEFORE UPDATE ON tally.trn_cost_category_centre
FOR EACH ROW EXECUTE FUNCTION tally.update_timestamp();

-- 30) trn_cost_inventory_category_centre
CREATE TABLE IF NOT EXISTS tally.trn_cost_inventory_category_centre (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  stock_item_id BIGINT REFERENCES tally.mst_stock_item(id) ON DELETE SET NULL,
  cost_centre_id BIGINT REFERENCES tally.trn_cost_centre(id) ON DELETE SET NULL,
  cost_category_id BIGINT REFERENCES tally.mst_cost_category(id) ON DELETE SET NULL,
  quantity NUMERIC(18,6),
  amount NUMERIC(18,6),
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  sync_status tally.sync_status NOT NULL DEFAULT 'NewRecord'
);
CREATE TRIGGER trg_trn_cost_inventory_category_centre_update
BEFORE UPDATE ON tally.trn_cost_inventory_category_centre
FOR EACH ROW EXECUTE FUNCTION tally.update_timestamp();